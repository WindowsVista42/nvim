call plug#begin('~/.vim/plugged')
  " Default configs
  Plug 'tpope/vim-sensible'
  Plug 'liuchengxu/vim-better-default'
  
  " File tree
  Plug 'scrooloose/nerdtree'

  "
  Plug 'glepnir/lspsaga.nvim'

  " Prettyness
  Plug '~/.vim/plugged/wal.vim'

  " Statusbar
  Plug 'vim-airline/vim-airline'

  Plug 'neovim/nvim-lspconfig'
  Plug 'nvim-lua/lsp_extensions.nvim'
  Plug 'nvim-lua/completion-nvim'

  Plug 'neovim/nvim-lspconfig'
  Plug 'simrat39/rust-tools.nvim'
  Plug 'timonv/vim-cargo'

  " Optional Dependencies
  Plug 'nvim-lua/popup.nvim'
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'

  " GLSL Syntax Highlighting
  Plug 'tikhomirov/vim-glsl'

" Show keymaps
" Plug 'liuchengxu/vim-which-key'
" Plug 'AckslD/nvim-whichkey-setup.lua'
call plug#end()

colorscheme wal
set cursorline
set mouse=a
set relativenumber

set wmw=0
set winminheight=0

" Tab and Window movement
noremap <C-l> :tabn<CR>
noremap <C-h> :tabp<CR>
noremap <C-j> <C-w>w
noremap <C-k> <C-w>W

" NERDTree Keybindings
nnoremap <C-n> :NERDTreeToggle<CR>
nnoremap <C-f> :FZF<CR>

" Faster scrolling
noremap <A-j> 4j
noremap <A-k> 4k
noremap <A-h> 4h
noremap <A-l> 4l

let g:SuperTabDefaultCompletionType = "<c-n>"

let $FZF_DEFAULT_COMMAND = 'fd --type f'

" Airline config
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = '$'
let g:airline_symbols.colnr = ' +'
let g:airline_symbols.readonly = 'r'
let g:airline_symbols.linenr = ' +'
let g:airline_symbols.maxlinenr = ' '
let g:airline_symbols.dirty='*'
let g:airline_symbols.whitespace = '='

let g:airline_section_z = '+%{line(".")} +%{col(".")}'


" Set completeopt to have a better completion experience
" :help completeopt
" menuone: popup even when there's only one match
" noinsert: Do not insert text until a selection is made
" noselect: Do not select, force user to select one from the menu
set completeopt=menuone,noinsert,noselect
 
" Avoid showing extra messages when using completion
set shortmess+=c
 
" Use <Tab> and <S-Tab> to navigate through popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" use <Tab> as trigger keys
imap <Tab> <Plug>(completion_smart_tab)
imap <S-Tab> <Plug>(completion_smart_s_tab):h

" Code navigation shortcuts
nnoremap <silent><space>i <cmd>lua vim.lsp.buf.definition()<CR>
" nnoremap <silent> K<cmd>lua vim.lsp.buf.hover()<CR>
" nnoremap <silent> gi <cmd>lua vim.lsp.buf.implementation()<CR>
" nnoremap <silent> J<cmd>lua vim.lsp.buf.signature_help()<CR>
" nnoremap <silent> gt <cmd>lua vim.lsp.buf.type_definition()<CR>
" nnoremap <silent> gr <cmd>lua vim.lsp.buf.references()<CR>
" nnoremap <silent> g0 <cmd>lua vim.lsp.buf.document_symbol()<CR>
" nnoremap <silent> gW <cmd>lua vim.lsp.buf.workspace_symbol()<CR>
" nnoremap <silent> ge <cmd>lua vim.lsp.buf.declaration()<CR>
" nnoremap <silent> ga <cmd>lua vim.lsp.buf.code_action()<CR>
" nnoremap <silent> <space>j <C-^>

nnoremap <silent><space>h <cmd>lua require('lspsaga.provider').lsp_finder()<CR>

nnoremap <silent><space>a <cmd>lua require('lspsaga.codeaction').code_action()<CR>
vnoremap <silent><space>a <C-U>lua require('lspsaga.codeaction').range_code_action()<CR>

nnoremap <silent><space>k <cmd>lua require('lspsaga.hover').render_hover_doc()<CR>
" nnoremap <silent><C-f> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(1)<CR>
" nnoremap <silent><C-b> <cmd>lua require('lspsaga.action').smart_scroll_with_saga(-1)<CR>

nnoremap <silent><space>s <cmd>lua require('lspsaga.signaturehelp').signature_help()<CR>
nnoremap <silent><space>r <cmd>lua require('lspsaga.rename').rename()<CR>
nnoremap <silent><space>d <cmd>lua require('lspsaga.provider').preview_definition()<CR>

nnoremap <silent><space>j <cmd>lua require('lspsaga.diagnostic').show_line_diagnostics()<CR>
nnoremap <silent><space>u <cmd>lua require('lspsaga.diagnostic').show_cursor_diagnostics()<CR>

nnoremap <silent><space>l <cmd>lua require('lspsaga.diagnostic').lsp_jump_diagnostic_next()<CR>
nnoremap <silent><space>h <cmd>lua require('lspsaga.diagnostic').lsp_jump_diagnostic_prev()<CR>

" Set updatetime for CursorHold
set updatetime=200 " ms

" " Goto previous/next diagnostic warning/error
" nnoremap <silent> g[ <cmd>lua vim.lsp.diagnostic.goto_prev()<CR>
" nnoremap <silent> g] <cmd>lua vim.lsp.diagnostic.goto_next()<CR>
 
" have a fixed column for the diagnostics to appear in
" this removes the jitter when warnings/errors flow in
set signcolumn=yes
 
" Enable type inlay hints
" autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *
" \ lua require'lsp_extensions'.inlay_hints{ prefix = '', highlight = "Comment", enabled = {"TypeHint", "ChainingHint", "ParameterHint"} }

" Enable diagnostic on hover
" autocmd BufEnter * lua require'completion'.on_attach()

" Configure LSP
" https://github.com/neovim/nvim-lspconfig#rust_analyzer
lua <<EOF

-- nvim_lsp object
local nvim_lsp = require'lspconfig'
local saga = require('lspsaga')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- attach completion when setting up lsp
  -- require'completion'.on_attach(client)

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.

end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { "ccls" }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end

local opts = {
    tools = { -- rust-tools options
        -- automatically set inlay hints (type hints)
        -- There is an issue due to which the hints are not applied on the first
        -- opened file. For now, write to the file to trigger a reapplication of
        -- the hints or just run :RustSetInlayHints.
        -- default: true
        autoSetHints = true,

        -- whether to show hover actions inside the hover window
        -- this overrides the default hover handler so something like lspsaga.nvim's hover would be overriden by this
        -- default: true
        hover_with_actions = true,

        -- These apply to the default RustRunnables command
        runnables = {
            -- whether to use telescope for selection menu or not
            -- default: true
            use_telescope = true

            -- rest of the opts are forwarded to telescope
        },

        -- These apply to the default RustSetInlayHints command
        inlay_hints = {
            -- wheter to show parameter hints with the inlay hints or not
            -- default: true
            show_parameter_hints = true,

            -- prefix for parameter hints
            -- default: "<-"
            parameter_hints_prefix = "<- ",

            -- prefix for all the other hints (type, chaining)
            -- default: "=>"
            other_hints_prefix = "=> ",

            -- whether to align to the lenght of the longest line in the file
            max_len_align = false,

            -- padding from the left if max_len_align is true
            max_len_align_padding = 1,

            -- whether to align to the extreme right or not
            right_align = false,

            -- padding from the right if right_align is true
            right_align_padding = 7
        },

        hover_actions = {
            -- the border that is used for the hover window
            -- see vim.api.nvim_open_win()
            border = {
                {"+", "FloatBorder"}, {"-", "FloatBorder"},
                {"+", "FloatBorder"}, {"|", "FloatBorder"},
                {"+", "FloatBorder"}, {"-", "FloatBorder"},
                {"+", "FloatBorder"}, {"|", "FloatBorder"}
            },

            -- whether the hover action window gets automatically focused
            -- default: false
            auto_focus = true
        }
    },

    -- all the opts to send to nvim-lspconfig
    -- these override the defaults set by rust-tools.nvim
    -- see https://github.com/neovim/nvim-lspconfig/blob/master/CONFIG.md#rust_analyzer
    server = {} -- rust-analyer options
}

require('rust-tools').setup(opts)

vim.cmd [[set shortmess+=c]]
vim.g.completion_confirm_key = ""
vim.g.completion_matching_strategy_list = { 'exact', 'substring', 'fuzzy' }
vim.g.diagnostic_enable_virtual_text = 1
-- vim.g.completion_enable_snippet = 'UltiSnips'
vim.g.completion_enable_auto_popup = 1


-- See `:help vim.lsp.*` for documentation on any of the below functions
-- buf_set_keymap('n', '<space>ge', '<cmd>lua vim.lsp.buf.declaration()<CR>'                 , opts)
-- buf_set_keymap('n', '<space>gd', '<cmd>lua vim.lsp.buf.definition()<CR>'                  , opts)
-- buf_set_keymap('n', '<space>K' , '<cmd>lua vim.lsp.buf.hover()<CR>'                       , opts)
-- buf_set_keymap('n', '<space>gi', '<cmd>lua vim.lsp.buf.implementation()<CR>'              , opts)
-- buf_set_keymap('n', '<space>J' , '<cmd>lua vim.lsp.buf.signature_help()<CR>'              , opts)
-- buf_set_keymap('n', '<space>D' , '<cmd>lua vim.lsp.buf.type_definition()<CR>'             , opts)
-- buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>'                      , opts)
-- buf_set_keymap('n', '<space>ga', '<cmd>lua vim.lsp.buf.code_action()<CR>'                 , opts)
-- buf_set_keymap('n', '<space>gr', '<cmd>lua vim.lsp.buf.references()<CR>'                  , opts)
-- buf_set_keymap('n', '<space>gl', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
-- buf_set_keymap('n', '<space>gp', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>'            , opts)
-- buf_set_keymap('n', '<space>gn', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>'            , opts)
-- buf_set_keymap('n', '<space>q' , '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>'          , opts)
-- buf_set_keymap('n', '<space>f' , '<cmd>lua vim.lsp.buf.formatting()<CR>'                  , opts)
-- buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>'        , opts)
-- buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>'     , opts)
-- buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)

-- " lsp provider to find the cursor word definition and reference
-- nnoremap <silent> gh <cmd>lua require'lspsaga.provider'.lsp_finder()<CR>
-- " or use command LspSagaFinder
-- nnoremap <silent> gh :Lspsaga lsp_finder<CR>
-- 
-- " code action
-- nnoremap <silent><leader>ca <cmd>lua require('lspsaga.codeaction').code_action()<CR>
-- vnoremap <silent><leader>ca :<C-U>lua require('lspsaga.codeaction').range_code_action()<CR>

saga.init_lsp_saga()

EOF

